# Makefile for python interface for package dnaencoding.
# File is generated by gopy. Do not edit.
# gopy build -output=dna -vm=python3 dna-compressor/internals/dna_encoding

GOCMD=go
GOBUILD=$(GOCMD) build -mod=mod
GOIMPORTS=goimports
PYTHON=/home/vs/.pyenv/shims/python3
LIBEXT=.so

# get the CC and flags used to build python:
GCC = $(shell $(GOCMD) env CC)
CFLAGS = "-I/home/vs/miniconda3/include/python3.12"
LDFLAGS = "-L/home/vs/miniconda3/lib" "-lpython3.12" -lpthread -ldl  -lutil -lm

all: gen build

gen:
	gopy gen -no-make -vm=python3 dna-compressor/internals/dna_encoding

build:
	# build target builds the generated files -- this is what gopy build does..
	# this will otherwise be built during go build and may be out of date
	- rm dnaencoding.c
	# goimports is needed to ensure that the imports list is valid
	$(GOIMPORTS) -w dnaencoding.go
	# generate dnaencoding_go$(LIBEXT) from dnaencoding.go -- the cgo wrappers to go functions
	$(GOBUILD) -buildmode=c-shared -o dnaencoding_go$(LIBEXT) dnaencoding.go
	# use pybindgen to build the dnaencoding.c file which are the CPython wrappers to cgo wrappers..
	# note: pip install pybindgen to get pybindgen if this fails
	$(PYTHON) build.py
	# build the _dnaencoding$(LIBEXT) library that contains the cgo and CPython wrappers
	# generated dnaencoding.py python wrapper imports this c-code package
	
	$(GCC) dnaencoding.c  dnaencoding_go$(LIBEXT) -o _dnaencoding$(LIBEXT) $(CFLAGS) $(LDFLAGS) -fPIC --shared -w
	


